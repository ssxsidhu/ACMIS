COMP 3350 Group 1: Sahilpreet Singh Sidhu, Vrushil Kiritkumar Patel, Prahalad Iyer, Mahamud Hasan Asif, Braden Bileski Malcolm

Big User Stories and their Developer Tasks:
	As a User, I want to be able to see my upcoming flights in clear detail (Priority: High) (Cost: 6 days)
		- Allow user to ID themselves with username       (Estimated Cost: 2 hours) (Actual Cost: 1 hour)
			* Developers: Sahilpreet
		- Retrieve a list of the user's booked flights    (Estimated Cost: 1 hour) (Actual Cost: 2 hours )
			* Developers: Prahalad, Vrushil
		- Sort the flights by their takeoff date and time (Estimated Cost: 2 hours) (Actual Cost: 1 hour)
			* Developers: Sahilpreet, Asif
		- Display the upcoming flights with details       (Estimated Cost: 15 hours) (Actual Cost: 9 hours)
			* Developers: Sahilpreet

	As a User, I want to be able to book direct and connecting flights (Priority: High) (Cost: 20 days)
		- Allow user to ID themselves with username                        (Estimated Cost: 2 hours) (Actual Cost: 1 hour)
			* Developers: Sahilpreet
		- Search from all flights by the takeoff and destination location  (Estimated Cost: 8 hours) (Actual Cost: 4 hours)
			* Developers: Prahalad, Vrushil
		- Display all the flights that meet the location criteria          (Estimated Cost: 4 hours) (Actual Cost: 10 hours)
			* Developers: Sahilpreet, asif
		- If no flights meet criteria, make it obvious there are none      (Estimated Cost: 1 hour) (Actual Cost: 2 hours)
			* Developers: Sahilpreet,Prahalad
		- Pick a flight from the list                                      (Estimated Cost: 2 hours) (Actual Cost: 5 hours)
			* Developers: asif,Vrushil
		- Allow the user to book the flight                                (Estimated Cost: 5 hours) (Actual Cost: 8 hours)
			* Developers: Sahilpreet,asif
		- Create a database to store users and flights, populate with data (Estimated Cost: 5 hours) (Actual Cost: 5 hours)
			* Developers: Braden
		- Track incoming and outgoing flights for each location            (Estimated Cost: 2 hours) (Actual Cost: 5 hours)
			* Developers: Vrushil, Braden


Group Meetings:
	June 1, 2022 : 1 Hour 
		- Meeting to discuss user story implementation, General Structure of ACMIS and Developer Tasks
		- Everyone in attendance
	June 2, 2022 : 1.5 Hours
		- Developer tasks assigned to all the teammates
		- Discussion was on creation of objects, implementing a stub database and getting ideas for the presentation
		- Sahilpreet, Vrushil, Prahald, and Braden in attendance
	June 7, 2022 : 1.5 Hours
		- Setup Skeletal Project on Github and setup README
		- Everyone in attendance
	June 9, 2022 : 2 Hours
		- Re-evaluated Project Goals and Re-assigned DEV tasks. 
		- Project will now focus on booking flights for Users rather than managing airlines
		- Everyone in attendance
	June 12, 2022 : 1 Hour
		- Teams updating other teams about the progress in specific tasks
		- Talked mainly about the graphical representation of the application 
		- Talked about the different ideas of how to create an adaptive user interface
		- Everyone in attendance
	June 13, 2022 : 1 Hour
		- Updating the teams on the new updates
		- Requesting for the required functionality in appropriate classes
		- Decided to start the testing process
		- Braden, Prahlad, Sahilpreet, and Vrushil in attendance
	June 14, 2022 : 1 Hour
		- Teams linking their parts together
		- Finalizing the main code base
		- Discussed testing
		- Everyone in attendance
	June 16, 2022 : 2 Hours
		- Final testing
		- Braden, Sahilpreet, and Vrushil in attendance
		
DEVELOPER TASKS
===============
June 18th, 2022 : 10 hours, Sahilpreet
   -Changed the ui for input of source location and destination location
   -Changed the front animation
   -Made the transition effect from front page to main activity
   -Changed the app icon
   
June 20rd, 2022 : 3-4 hours, Braden
   -Hsqldb design and layout
June 21st,2022 : 3 hours , Sahil 
-Added search results page which shows the flights available from Location A to B on the departure date
-Added a custom recyclerview adapter to show the list of flights
-Created a view for a single item of list which shows required details
-Added viewPager for tabs at the bottom which makes the tabs persistent upon changing.
   
June 23rd, 2022 : 3-4 hours, Vrushil
   -Figuring out how to calculate duration from one point to another in different timezones. 
   -Implemented the date and time code in the flight class. 
   -Changed All the flight instances to use the zoned date and time.  
   
June 24rd, 2022 : 7 hours, Braden 
    -Hsqldb implementation
    -Created Database Interface
    
June 24, 2022 : 2-3 Hours, Prahalad
   -Conduct Initial Code Clean up and Refactoring of Classes
   -Research Path Finding algorithms and Graph implementation for Connected Flights
   
June 25th, 2022 : 4 hours, Sahilpreet
   -Added a new fragment for getting the details of the flight from the user which includes:
   		-Departure date the user is travelling on
		-Return Date
		-Number of passengers the user wants to add
	
June 27h, 2022 : 2hours, Sahilpreet
-Added a details page for the route when the user clicks on an item from search results
-Created a custom shape to represent route
-Created a custom adapter to show the details of the route

June 28th, 2022 : 3.5 Hours, Prahalad
   -Create Skeletal Code for Graph, Adjacency List and Nodes
   -Ensure Data Structure consistency across design by including necessary wrappers
   -Integrate Depth First Search Idea into a Method to be used
   
July 1st ,2022 : 5 hours, Sahil
-Created a order summary page to show the selected flight and book it
-Added a continue button in route details page which shows this page if the user wants a one-way booking or shows return flights if the user wants a round-trip
-Removed problems related to Law of demeter related problems from the adapters

July 6th, 2022 : 5.5 Hours, Prahalad
   -Create Skeletal Code for RouteManager
   -Implemented Node and AdjacencyList Classes
   -Implemented toString methods to other Object Classes
   -Implemented equals methods to other Object Classes
		
July 7th, 2022  : 7 hours, Vrushil
   -Refactored all the code.
   -Ensured only one consistent coding style in all the files. 
   -Remove unused files and commented out code. 
   -Added more testing in User, Flight and location classes. 
   -Changed the test suite from junit 3 to junit 4. 

July 8th,2022 : 2 hours, Vrushil
   -Added the functionality for the searchRoute to check if the flight has enough seats.
   -Bookings now have number of passengers/tickets booked by the user.
   
July 8th, 2022 : 6 hours, Prahalad
   -Finished DFS implementation for Route Manager
   -Refactored and commented code on Adjacency list, Graph and Node classes.
   -Started creating Direct Route and Conncected route implementation.
   
July 8th, 2022 : 6 hours, Braden
   -Linking the hsqldb to the project, ensuring everything run smoothly.
   -Added datastub testing.
   
July,8th 2022: 2 hours, Sahilpreet
-Created a custom Card adapter for manage flights tab which shows all the booked flights
-Shows a single Card if the flight booked is one-way , otherwise shows 2 nested cards for each flight if the flight is round-trip

July 11th,2022 : 8 hours, Vrushil, Sahil, Prahalad, Braden
   -Performed Extensive Debugging on Route Manager and Database Interface
   -Created Test Suites and Ran Tests on Objects
   
July 11th,2022 : 4 hours, Vrushil
   -Cleaned up the code in Route,Booking and Booking Manager class.
   -Added more thorough testing in the 3 classes.
   
July 11th,2022 : 5 hours, Braden, Vrushil, Sahilpreet and Prahalad
    - Perform extensive testing and implement Return Routes
    - Refactor Code in all classes and comments where needed
    
July 12th, 2022 : 5 hours, Vrushil, Braden 
    - Updating the readMe
    - Looking for return flights from both databases just to make it easier for the markers.
    
July 12th, 2022 : 3 hours, Vrushil
    - Added testing for AccessLocation,AccessRouteFlights,AccessBookings
    - Reformatting its code.
    - Reformatted Presentation package. 
    - Removed all unused imports/dead code.
    
July 13th, 2022 : 3.5 hours, Prahalad, Sahilpreet
    - Deep Clean Code - went through every line and removed unnecessary methods and variables
    - Add getters and setters in all object classes
    - Override equals and toString in object classes.
    - Added Flights and Restructred Presentation Package (Sahil)
    - RouteManager successfully stores Routes now        (Sahil)
    - Added some animation when app starts	         (Sahil)    
    
July 14th, 2022 : 3 hours, Prahalad
    - Deep Clean part 2. Done samething in Business Classes and commented code
    - Wrote only necessary constructors
    - Reformatted Objects and Business Package
    - Added Contains method in User Class
July 15th, 2022 : 4 hours, Vrushil
    - Learnt how to use espresso and how to record tests
    - Created the acceptance test scripts
July 17th, 2022 : 4.5 hours, Prahalad
    - Rewrote BookingManager Class as BookingManager2 for implementation testing of different versions
    - Added Constructors and Getters and Setters for Booking Object
    - Rewrite RouteManager Implementation for RouteBuilding
    
July 18th, 2022 : 3.5 hours, Sahilpreet
    - Cleaned Files and added Getters in GetAccessRoutesFlights
    - Debugging and Code Breaking Changes
    - Sort Display
    
July 19th, 2022 : 4 hours, Vrushil
    - Cleared the code in the Access classes.
    - Reformated the code in the access classes.
    - added testing for the Accesslocation and AccessRoutes
    
July 20th, 2022 : 3.5 hours, Prahalad
    - RolledBack all changes made in previous commits. Rollback above log primarily.
    
July 22nd, 2022 : 3 hours, Prahalad
    - Implemented SortRoutes using Comparator Interface. 
    - Write Skeletal Test Classes for SortRoute, RouteManager.

July 24th, 2022 : 5 hours, Vrushil 
    - Wrote integration tests, businesspersistence seam & businessHsqldb tests.
    - solved the booking id bug.
    - reformatted all the code in the integration test.


